using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Microsoft.EntityFrameworkCore;
using System.IO;

namespace GoProTimelapse
{
    public class Telegramm
    {
        private readonly TelegramBotClient _bot;
        private readonly AppDbContext _db;

        public Telegramm(string botToken)
        {
            _bot = new TelegramBotClient(botToken);
            _db = new AppDbContext();
        }

        //–ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è
        public async Task StartAsync()
        {
            var me = await _bot.GetMe();

            _bot.StartReceiving(
                HandleUpdateAsync,
                HandleErrorAsync
            );

            Console.ReadLine();
        }

        //–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        private async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken token)
        {
            if (update.Type != UpdateType.Message || update.Message == null)
                return;

            var message = update.Message;
            var chatId = (int)message.Chat.Id;

            switch (message.Text)
            {
                case "/start":
                    await HandleStartCommand(chatId, message);
                    break;

                case "/photo":
                    await HandlePhotoCommand(chatId, message);
                    break;

                case "/scheduledPhoto":
                    await CreateScheduledPhotoCommand(DateTime.UtcNow.AddMinutes(1), message, chatId);
                    break;

                default:
                    await bot.SendMessage(chatId, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É");
                    break;
            }
        }

        //–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        private async Task HandleStartCommand(int chatId, Message message)
        {
            var username = message.Chat.Username ?? $"user_{message.Chat.Id}";
            var user = await _db.Users.FirstOrDefaultAsync(u => u.Username == username);

            if (user == null)
            {
                user = new User
                {
                    Username = username,
                    FirstName = message.Chat.FirstName ?? "",
                    LastName = message.Chat.LastName ?? "",
                    RegisteredAt = DateTime.UtcNow,
                    TGUserId = chatId
                };

                _db.Users.Add(user);
                await _db.SaveChangesAsync();

                await _bot.SendMessage(chatId,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /photo —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ.");
            }
            else
            {
                await _bot.SendMessage(chatId, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòâ");
            }
        }

        //–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /photo
        private async Task HandlePhotoCommand(int chatId, Message message)
        {
            var username = message.Chat.Username ?? $"user_{message.Chat.Id}";
            var user = await _db.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (user == null)
            {
                await _bot.SendMessage(chatId, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.");
                return;
            }

            var task = new TaskItem
            {
                Type = TaskType.Photo,
                Status = TaskStatus.Created,
                ChatId = chatId,
                UserId = user.Id,
                CreatedAt = DateTime.UtcNow
            };
            _db.Tasks.Add(task);

            await _db.SaveChangesAsync();

            await _bot.SendMessage(chatId, "üì∏ –ó–∞–¥–∞—á–∞ –Ω–∞ —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–Ω–∞. –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é!");
        }

        public async Task CreateScheduledPhotoCommand(DateTime scheduledTime, Message message, int chatId)
        {
            var username = message.Chat.Username ?? $"user_{message.Chat.Id}";
            var user = await _db.Users.FirstOrDefaultAsync(u => u.Username == username);
            if (user == null)
            {
                await _bot.SendMessage(chatId, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.");
                return;
            }
            var task = new TaskItem
            {
                Type = TaskType.Photo,
                Status = TaskStatus.Created,
                CreatedAt = DateTime.UtcNow,
                ScheduledAt = scheduledTime
            };
            _db.Tasks.Add(task);
            await _db.SaveChangesAsync();
        }

        //–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        public async Task SendVideo(string videoName, string botToken, int chatID)
        {
            using var cts = new CancellationTokenSource();
            var bot = new TelegramBotClient(botToken, cancellationToken: cts.Token);

            await using Stream stream = File.OpenRead($"./{videoName}");
            await bot.SendVideo(chatID, stream);
        }

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram API
        private Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken token)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {exception.Message}");
            return Task.CompletedTask;
        }
    }

    //–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    public static class TelegramExtensions
    {
        public static async Task SendMessage(this ITelegramBotClient bot, int chatId, string text)
        {
            await bot.SendMessage(chatId, text, parseMode: ParseMode.Markdown);
        }
    }
}